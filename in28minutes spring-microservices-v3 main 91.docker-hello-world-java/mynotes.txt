cleaning up:
    docker system prune -a --volumes -f //removing all images container etc.
    Remove All Stopped Containers and Unused Networks, Volumes, and Images:
        docker system prune -a -f --volumes
    Remove All Docker Images:
        docker image prune -a -f
1)navigate to the cmd of the docker file and do
    Dockerfile:
        FROM openjdk:21-jdk-slim
        WORKDIR /kaarthik
        COPY hello-world-java.jar /kaarthik/app.jar
        EXPOSE 3000
        ENTRYPOINT ["java","-jar","/kaarthik/app.jar"]

    in this WORKDIR /kaarthik is inside the container_path i'm working on
        and by ENTRYPOINT, i'm running the container_path i'm working on

    in the DOckerfile:
        i use RUN to run the commands inside the container
        i use ENTRYPOINT to run the container itself (i.e the main part)

    docker build -t container_name .

        now this container exists in our system (not yet pushed to the docker repository)

    docker run -d -p 5000:5000 image_name

        now this will run the container in the detached mode (-d)
        i can access the container using my localhost (hostport:container_port) mapping

    docker stop alpha

        alpha is the container id , i get from the docker -ps
        it is not the image name
        conversly, i can set the container name when i'm runnning!
            docker run -d -p 5000:5000 --name my_container alpha
    interesting case:
        if the app.prop file has x
        and in the Dockerfile if i expose y instead via(EXPOSE 8081)

        during the run host_port:x only works, host_port:y doesnt work!

            only the app.properties take preference, the EXPOSE in Dockerfile is just a documentation hint




2) but wrong approach, i should build the jar file inside the docker itself
    in the earlier approach, i build the jar on my own and then i just exported the JAR file
    so here, i will be trying to build the JAR file in my system itself

    # this below example didnt work properly

        FROM jelastic/maven:3.9.5-openjdk-21 AS buildd
        WORKDIR /kaarthik
        COPY . /kaarthik
        # the above command copies all the files from app to /kaarthik in container
        RUN mvn -f /kaarthik/pom.xml clean package

        FROM openjdk:21-jdk-slim
        EXPOSE 5000
        COPY --from=buildd /kaarthik/*.jar app.jar
        # instead of copying from our java app, i copy it from the BUILD stage
        ENTRYPOINT [ "sh", "-c", "java -jar /app.jar" ]

    error i got was : unable to find app.jar
     corrected code:
         # Build stage
         FROM jelastic/maven:3.9.5-openjdk-21 AS buildd
         WORKDIR /kaarthik
         COPY . /kaarthik
         RUN mvn -f /kaarthik/pom.xml clean package

         # Find the jar file in the build stage
         RUN find /kaarthik -name "*.jar" -exec cp {} /kaarthik/app.jar \;

         # Runtime stage
         FROM openjdk:21-jdk-slim
         EXPOSE 5000

         # Copy the found jar file
         COPY --from=buildd /kaarthik/app.jar /app.jar

         # Run the application
         ENTRYPOINT ["sh", "-c", "java -jar /app.jar"]

        now i'm finfing and moving the .jar file before i run ;)
    TIP: VOLUME is a keyword i can use for creating special memories shared between containers
3) layer caching feature of docker:
    put the frequently used lines first, so that they can be reused instead of building again and again

    comes into play when i'm reusing the same Dockerfile to build different images with small changes in the functionalities
4) Maven
    helps create jar for spring boot app
    helps run sbp
    helps to create a container image
    commands:
        mvn spring-boot:run
        mvn spring-boot:start (non blocking running of app)
        " ":stop
        " ":build-image
        " ":repackage (repackang as
5) Distributd Tracing

    instead of using a java project, i'm doing it via docker

    docker run -p 9411:9411 openzipkin/zipkin:2.23
    fjfj
        notice i didnt use -d, because i want it to run in the terminal
    OpenTelemetry :  collection of tools , APIs, SDKs to export and analyze

    this is where Distributed tracing comes into pucture - it helps me monitor and log eveything

    setup:
        <!-- SB2  : Sleuth (Tracing Configuration)
                    > Brave (Tracer library)
                    > Zipkin
        -->

        <!--
        <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-starter-sleuth</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-sleuth-brave</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-sleuth-zipkin</artifactId>
        </dependency>
        -->

        <!-- SB3 :  Micrometer
                    > OpenTelemetry
                    > Zipkin
        -->

        <!-- Micrometer - Vendor-neutral application observability facade.
            Instrument your JVM-based application code without vendor lock-in.
            Observation (Metrics & Logs) + Tracing.
        -->

        <dependency>
            <groupId>io.micrometer</groupId>
            <artifactId>micrometer-observation</artifactId>
        </dependency>

        <!-- OPTION 1: Open Telemetry as Bridge (RECOMMENDED) -->
        <!-- Open Telemetry
            - Simplified Observability (metrics, logs, and traces) -->

        <dependency>
            <groupId>io.micrometer</groupId>
            <artifactId>micrometer-tracing-bridge-otel</artifactId>
        </dependency>

        <dependency>
            <groupId>io.opentelemetry</groupId>
            <artifactId>opentelemetry-exporter-zipkin</artifactId>
        </dependency>


        <!-- OPTION 2: Brave as Bridge -->

        <!--
        <dependency>
            <groupId>io.micrometer</groupId>
            <artifactId>micrometer-tracing-bridge-brave</artifactId>
        </dependency>

        <dependency>
            <groupId>io.zipkin.reporter2</groupId
            <artifactId>zipkin-reporter-brave</artifactId>
        </dependency>
        -->
    it depends on whether i am uing SB2 or SB3
    and it also depends on whether i want just tracing or all metrics
    to add in app.prop in currency-exchange:
        management.tracing.sampling.probability=1.0
        logging.pattern.level=%5p [${spring.application.name:},%X{traceId:-},%X{spanId:-}]
    micrometer assings an ID to the request so that it makes it easier for me to find it

    now add the same in pom.xml and app.properties for the currency-conversion and api gateway

	tips:
		in sb3, currency-conversion-feign goes to currency-exchange, but it doesnt get registered
		so i have to add an additional dependency in pom.xml of currency-conversion
		<dependency>
			<groupId>io.github.openfeign</groupId>
			<artifactId>feign-micrometer</artifactId>
		</dependency>



























































